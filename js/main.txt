//http://bl.ocks.org/zanarmstrong/b1c051113be144570881
var jitter_start_size = 1000
var jitter_multi_when_previous_improved = 0.95;
var jitter_multi_when_previous_worse = 0.95;

var margin = {
        top: 20,
        right: 20,
        bottom: 20,
        left: 30
    },
    padding = {
        top: 20,
        right: 60,
        bottom: 60,
        left: 30
    },
    outerWidth = 960,
    outerHeight = 500,
    innerWidth = outerWidth - margin.left - margin.right,
    innerHeight = outerHeight - margin.top - margin.bottom,
    width = innerWidth - padding.left - padding.right,
    height = innerHeight - padding.top - padding.bottom;

var x = d3.scaleIdentity()
    .domain([0, width]);

var y = d3.scaleIdentity()
    .domain([0, height]);

var xAxis = d3.axisBottom()
    .scale(x)

var yAxis = d3.axisRight()
    .scale(y)

var svg = d3.select("body").append("svg")

var g = svg.attr("width", outerWidth)
    .attr("height", outerHeight)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var voronoi_group = g.append("g").attr("class", "voronoi_group")

var demand_data_lines_group = g.append("g").attr("class", "demand_data_lines_group")
var demand_data_circles_group = g.append("g").attr("class", "demand_data_circles_group")

var locations_group = g.append("g").attr("class", "locations_group")


svg.on("click", function() {
    update_dots(d3.mouse(this))
})


function get_random_location() {
    return [d3.randomUniform(0, width)(), d3.randomUniform(0, height)()]
}

var demand_data = _.map(d3.range(500), get_random_location)
var demand_data = _.map(demand_data, function(d) {
    return {
        point: d,
        demand: d3.randomUniform(0, 100)() + Math.pow(d[0],3)
    }
})

var min_demand = _.min(demand_data, function(d) {
    return d.demand
})["demand"]
var max_demand = _.max(demand_data, function(d) {
    return d.demand
})["demand"]
var mid = (min_demand + max_demand) / 2

var demand_colour_scale = d3.scaleLinear().domain([min_demand, mid, max_demand]).range(["#6AE817", "#FFA200", "#B30409"])


// Plot demand data
demand_data_circles_group.selectAll(".demand_data").data(demand_data)
    .enter()
    .append("circle")
    .attr("r", 3)
    .attr("cx", function(d) {
        return d.point[0]
    })
    .attr("cy", function(d) {
        return d.point[1]
    })
    .attr("fill", function(d) {
        return demand_colour_scale(d.demand)
    })
    .attr("class", "demand_data")

demand_data_lines_group.selectAll(".demand_data_lines").data(demand_data)
    .enter()
    .append("line")
    .attr("class", "demand_data_lines")

//Function for voronoi
var my_voronoi = d3.voronoi()
    .x(function(d) {
        return d.point[0];
    })
    .y(function(d) {
        return d.point[1];
    })
    .extent([
        [0, 0],
        [width, height]
    ])

var locations = []

locations_group.append("text").text("").attr("class", "loss_text")
    .attr("x", width)
    .attr("y", height + 20)
    .attr("text-anchor", "end")

function update_dots(point) {

    point[0] = point[0] - margin.left
    point[1] = point[1] - margin.top


    new_location = {
        point: point,
        name: locations.length + 1,
        previous_jitter: [0, 0],
        previous_loss_improve: false,
        jitter_size: jitter_start_size
    }

    locations.push(new_location)

    redraw_voronoi()

}

var drag = d3.drag()
    .on("drag", dragged)

function dragged(d) {
    d.y = d3.event.y
    d.x = d3.event.x

    // d3.select(this).attr("cx", d.x = d3.event.x).attr("cy", );

    this.__data__.data.point = [d3.event.x, d3.event.y]

    //update locations data
    locations = d3.selectAll(".locations_circles").data()
    locations = _.map(locations, function(d) {
        return d.data
    })

    current_loss = compute_loss()
    redraw_voronoi()
}



function redraw_voronoi() {

    var diagram = my_voronoi.polygons(locations)

    function path_generator(d) {
        return d ? "M" + d.join("L") + "Z" : null
    }

    var v_cells = voronoi_group.selectAll(".voronoicells")
        .data(diagram)

    v_cells.enter().append("path").merge(v_cells)
        .attr("class", "voronoicells")
        .attr("d", function(d) {
            return path_generator(d)
        })

    var circles = locations_group.selectAll(".locations_circles")
        .data(diagram)

    circles = circles.enter().append("circle")
        .attr("r", function(d) {
            return 7
        })
        .attr("class", "locations_circles")
        .call(drag)
        .merge(circles)
        .attr("cx", function(d) {
            return d.data.point[0]
        })
        .attr("cy", function(d) {
            return d.data.point[1]
        })

    draw_loss()

}

function draw_loss() {
    //Iterate through the demand_data.
    //For each point find the closest location
    //And compute the distance
    //And draw line to closest 

    var loss_dict = compute_loss()
    var loss_data = loss_dict.loss_data
    var total_loss = loss_dict.total_loss

    // Get min and max distance
    var min_loss = _.min(loss_data, function(d) {
        return d.loss
    })["loss"]
    var max_loss = _.max(loss_data, function(d) {
        return d.loss
    })["loss"]
    var mid = (min_loss + max_loss) / 2

    var loss_line_colour_scale = d3.scaleLinear().domain([min_loss, mid, max_loss]).range(["#04CE4E", "#CE8E00", "#CE043A"])


    demand_data_lines_group.selectAll(".demand_data_lines").data(loss_data)
        .attr("x1", function(d) {
            return d.this_point[0]
        })
        .attr("y1", function(d) {
            return d.this_point[1]
        })
        .attr("x2", function(d) {
            return d.closest_point[0]
        })
        .attr("y2", function(d) {
            return d.closest_point[1]
        })
        .style("stroke", function(d) {
            return loss_line_colour_scale(d.loss)
        })
        .style("stroke-width", 1)




    locations_group.select(".loss_text").text("Total loss: " + d3.format(",.0f")(total_loss))

}

function get_closest_point(point) {

    locations2 = _.sortBy(locations, function(this_location) {
        return get_distance(this_location.point, point.point)
    })
    return locations2[0]
}

function get_distance(p1, p2) {
    a2 = Math.pow((p1[0] - p2[0]), 2)
    b2 = Math.pow((p1[1] - p2[1]), 2)
    return Math.pow(a2 + b2, 0.5)
}

function point_to_plot_location(point) {
    return [point[0] + margin]
}


function compute_loss() {

    var loss_data = _.map(demand_data, function(d) {
        var closest_point = get_closest_point(d)["point"]
        var this_distance = get_distance(d.point, closest_point)
        return {
            this_point: d.point,
            closest_point: closest_point,
            distance: this_distance,
            demand: d.demand,
            loss: this_distance * d.demand
        }
    })



    var total_loss = 0
    _.each(loss_data, function(d) {
        total_loss = total_loss + d.loss
    })

    return {
        loss_data: loss_data,
        total_loss: total_loss
    }

}

var current_loss = null;

$('#optimise').on('click', optimise_tick)
$('#stop').on('click', function(d) {
    clearTimeout(timer)
})

// For each point remember what a previous 'good' movement was
// Move all points before recomputing loss

function optimise_tick() {
    timer = setInterval(function() {
        optimise_locations()
    }, 0)
}



function optimise_locations() {
    // For each location, try a small movement and if it improves the loss function, do it

    if (!(current_loss)) {
        current_loss = compute_loss()
    }



    for (var i = 0; i < locations.length; i++) {

        var saved_location = [locations[i].point[0], locations[i].point[1]]

        // if loss improved previousy
        if (locations[i].previous_loss_improve) {
            this_jitter = _.map(locations[i].previous_jitter, function(d) {
                return d * jitter_multi_when_previous_improved
            })
        } else {

            locations[i].jitter_size = locations[i].jitter_size * jitter_multi_when_previous_worse;

            var js = locations[i].jitter_size

            //Ocasionally add large jitter just to check it doesn't make things better
            if (d3.randomUniform()() > 0.9) {
                locations[i].jitter_size = jitter_start_size * d3.randomUniform()();
                js = locations[i].jitter_size;
            }

            this_jitter = _.map([0, 0], function(d) {
                return d3.randomUniform(-js, js)()
            })
        }


        //Modify the location of this point
        locations[i].point[0] += this_jitter[0]
        locations[i].point[1] += this_jitter[1]

        locations[i].previous_jitter = this_jitter

        //Recompute loss
        new_loss = compute_loss()

        //If new loss is worse, undo 
        if (new_loss.total_loss > current_loss.total_loss) {
            locations[i].point = saved_location;
            locations[i].jitter_size = locations[i].jitter_size * 0.7;
            locations[i].previous_loss_improve = false

        } else {
            current_loss = new_loss

        }


    }

    //Ocasionally add large jitter to all points just to check it doesn't make things better - do this when all jitters are small

    var max_jitter_size = _.map(locations, function(d) {return d.jitter_size})
    var max_jitter_size = _.max(test)
    var test =  (d3.randomUniform()() > 0.75 & max_jitter_size<0.0001) 



    if (test) {
        saved_locations = $.extend(true, [], locations);  

        for (var i = 0; i < locations.length; i++) {

            js = d3.randomUniform(-jitter_start_size, jitter_start_size)()

            this_jitter = _.map([0, 0], function(d) {
                    return d3.randomUniform(-js, js)()
                })
            

            if (d3.randomUniform()() > 0.5) {

                //Modify the location of this point
                locations[i].point[0] += this_jitter[0]
                locations[i].point[1] += this_jitter[1]
                locations[i].previous_jitter = [0,0]
                locations[i].previous_loss_improve = false
                locations[i].jitter_size = jitter_start_size

            }
            

        }


        new_loss = compute_loss()

        //If new loss is worse, undo 
        if (new_loss.total_loss >= current_loss.total_loss) {
            locations = saved_locations;

        } else {
            current_loss = new_loss
            console.log("randomised improvement")

        }
    }


    redraw_voronoi()


}